Create database maven_toy_data;
-- 1. What is the total sales revenue generated by each store?
use maven_toy_data;
select * from sales;
SELECT store_id, SUM(Units) AS total_sales_revenue
FROM sales
GROUP BY store_id;

-- 2. Which products are the top-selling in terms of units sold?
use maven_toy_data;
select * from products,sales;
SELECT 
    p.product_id,
    p.product_name,
    SUM(s.Units) AS total_units_sold
FROM 
    products p
JOIN 
    sales s ON p.product_id = s.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_units_sold DESC;
    
-- 3. What is the sales performance by product category?
use maven_toy_data;
select * from sales,products;
SELECT 
    p.Product_Category,
    SUM(s.Units) AS total_units_sold,
    SUM(s.Units * CAST(REPLACE(p.Product_Price, '$', '') AS DECIMAL(10, 2))) AS total_revenue
FROM 
    products p
JOIN 
    sales s ON p.Product_ID = s.Product_ID
GROUP BY 
    p.Product_Category
ORDER BY 
    total_revenue DESC;
    
-- 4. What are the current inventory levels for each product at each store?
use maven_toy_data;
SELECT
    i.Store_ID,
    p.Product_Name,
    i.Stock_On_Hand - COALESCE(SUM(s.Units), 0) AS current_inventory
FROM
    inventory i
JOIN
    products p ON i.Product_ID = p.Product_ID
LEFT JOIN
    sales s ON i.Product_ID = s.Product_ID AND i.Store_ID = s.Store_ID
GROUP BY
    i.Store_ID, p.Product_Name, i.Stock_On_Hand
ORDER BY
    i.Store_ID, p.Product_Name;

-- 5.How do monthly sales trends vary across different stores?
USE maven_toy_data;

SELECT
    s.Store_ID,
    DATE_FORMAT(s.Date, '%Y-%m') AS month,
    SUM(s.Units) AS total_units_sold
FROM
    sales s
GROUP BY
    s.Store_ID, month
ORDER BY
    month, s.Store_ID;
    
-- 6.Which stores have the highest and lowest sales performance?
USE maven_toy_data;
SELECT
    s.Store_ID,
    SUM(s.Units) AS total_units_sold,
     SUM(s.Units * CAST(REPLACE(p.Product_Price, '$', '') AS DECIMAL(10, 2))) AS total_revenue
FROM
    sales s
JOIN 
    products p ON s.Product_ID = p.Product_ID
GROUP BY
    s.Store_ID
ORDER BY
    total_revenue DESC; 

-- 7. What is the profit margin for each product?
USE maven_toy_data;
SELECT
    Product_ID,
    Product_Name,
    CAST(REPLACE(Product_Price, '$', '') AS DECIMAL(10, 2)) AS selling_price,
    CAST(REPLACE(Product_Cost, '$', '') AS DECIMAL(10, 2)) AS cost,
    (CAST(REPLACE(Product_Price, '$', '') AS DECIMAL(10, 2)) - CAST(REPLACE(Product_Cost, '$', '') 
    AS DECIMAL(10, 2))) / CAST(REPLACE(Product_Price, '$', '') AS DECIMAL(10, 2)) * 100 AS profit_margin
FROM
    products;

-- 8.How are sales distributed across different cities?
USE maven_toy_data;
SELECT
    st.Store_Location,
    SUM(s.Units) AS total_units_sold,
    SUM(s.Units * CAST(REPLACE(p.Product_Price, '$', '') AS DECIMAL(10, 2))) AS total_revenue
FROM
    sales s
JOIN
    products p ON s.Product_ID = p.Product_ID
JOIN
    stores st ON s.Store_ID = st.Store_ID
GROUP BY
    st.Store_Location
ORDER BY
    total_revenue DESC; 
    
-- 9.Which products are out of stock in each store?
USE maven_toy_data;

SELECT
    i.Store_ID,
    p.Product_Name
FROM
    inventory i
JOIN
    products p ON i.Product_ID = p.Product_ID
WHERE
    i.Stock_On_Hand = 0
ORDER BY
    i.Store_ID, p.Product_Name;

-- 10.How do sales vary by specific dates?
use maven_toy_data;
select * from products;
select * from sales;
SELECT Date, SUM(Units) AS Total_Units_Sold
FROM sales 
GROUP BY Date
ORDER BY Date;

-- 11.What is the average cost of products in each category?
use maven_toy_data;
select * from products;
describe products;
SELECT Product_Category, AVG(REPLACE(Product_Cost, '$', '') + 0) AS Average_Cost
FROM products
GROUP BY Product_Category;

-- 12.What is the sales growth over time for the entire company?
USE maven_toy_data;
WITH MonthlySales AS (
    SELECT
        DATE_FORMAT(CAST(s.Date AS DATE), '%Y-%m') AS month,
        SUM(s.Units * CAST(REPLACE(p.Product_Price, '$', '') AS DECIMAL(10, 2))) AS total_revenue
    FROM
        sales s
    JOIN 
        products p ON s.Product_ID = p.Product_ID
    GROUP BY
        month
)

SELECT
    month,
    total_revenue,
    LAG(total_revenue) OVER (ORDER BY month) AS previous_month_revenue,
    CASE 
        WHEN LAG(total_revenue) OVER (ORDER BY month) IS NULL THEN NULL
        ELSE ((total_revenue - LAG(total_revenue) OVER (ORDER BY month)) / LAG(total_revenue) 
        OVER (ORDER BY month)) * 100
    END AS growth_rate
FROM
    MonthlySales
ORDER BY
    month;

-- 13.How does the store open date affect sales performance?
use maven_toy_data;
WITH SalesWithStoreAge AS (
    SELECT 
        s.Store_ID,
        DATEDIFF(sd.Date, s.Store_Open_Date) / 365.25 AS Store_Age_Years,  
        sd.Units
    FROM 
        stores s
    JOIN 
        sales sd ON s.Store_ID = sd.Store_ID
)

SELECT 
    CASE 
        WHEN Store_Age_Years < 1 THEN 'Less than 1 year'
        WHEN Store_Age_Years BETWEEN 1 AND 3 THEN '1-3 years'
        WHEN Store_Age_Years BETWEEN 3 AND 5 THEN '3-5 years'
        ELSE 'More than 5 years'
    END AS Store_Age_Group,
    SUM(Units) AS Total_Sales,
    AVG(Units) AS Avg_Sales
FROM 
    SalesWithStoreAge
GROUP BY 
    Store_Age_Group
ORDER BY 
    Store_Age_Group;
    
-- 14.What percentage of total sales does each store contribute?
use maven_toy_data;
WITH StoreSales AS (
    SELECT 
        Store_ID,
        SUM(Units) AS Store_Total_Sales
    FROM 
        sales
    GROUP BY 
        Store_ID
), TotalSales AS (
    SELECT 
        SUM(Units) AS Overall_Total_Sales
    FROM 
        sales
)

SELECT 
    s.Store_ID,
    s.Store_Total_Sales,
    (s.Store_Total_Sales / t.Overall_Total_Sales) * 100 AS Percentage_Contribution
FROM 
    StoreSales s
CROSS JOIN 
    TotalSales t
ORDER BY 
    Percentage_Contribution DESC;
    
-- 15.How do sales compare to current stock levels for each product?
use maven_toy_data;
WITH ProductSales AS (
    SELECT 
        Product_ID,
        SUM(Units) AS Total_Units_Sold
    FROM 
        sales
    GROUP BY 
        Product_ID
)

SELECT 
    p.Product_ID,
    p.Stock_On_Hand,
    ps.Total_Units_Sold,
    (p.Stock_On_Hand - ps.Total_Units_Sold) AS Stock_Remaining,
    CASE 
        WHEN p.Stock_On_Hand - ps.Total_Units_Sold > 0 THEN 'In Stock'
        ELSE 'Out of Stock'
    END AS Stock_Status
FROM 
    inventory p
LEFT JOIN 
    ProductSales ps ON p.Product_ID = ps.Product_ID
ORDER BY 
    Stock_Status DESC, p.Product_ID;